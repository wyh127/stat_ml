text(facthealth$scores[,c(2,3)],row.names(ushealth),xpd=NA,cex=0.7,col=type,pos=4)
par(opar)
head(ushealth)
print(facthealth, cutoff=0.001)
print(round(facttable, 4))
lab=colnames(ushealth)[3:9]
opar=par(mfrow=c(2,2))
plot(c(-1.1,1.1),c(-1.1,1.1), type="n", main="US health (varimax)",
xlab=expression(q[1]), ylab=expression(q[2]))
ucircle<-cbind(cos((0:360)/180*3.14159),sin((0:360)/180*3.14159))
points(ucircle,type="l",lty="dotted")
abline(h = 0)
abline(v = 0)
text(facthealth$loadings[,1:2],labels=lab,col="black")
frame()
plot(c(-1.1,1.1),c(-1.1,1.1), type="n", main="US health (varimax)",
xlab=expression(q[1]),ylab=expression(q[3]))
points(ucircle,type="l",lty="dotted")
abline(h = 0)
abline(v = 0)
text(facthealth$loadings[,c(1,3)],labels=lab,col="black")
plot(c(-1.1,1.1),c(-1.1,1.1),type="n",main="US health (varimax)",xlab=expression(q[2]),ylab=expression(q[3]))
points(ucircle,type="l",lty="dotted")
abline(h = 0)
abline(v = 0)
text(facthealth$loadings[,c(2,3)],labels=lab,col="black")
type = as.numeric(ushealth$reg)
type2 = type-1
type2[which(type2==3)]=4
dev.new()
par(mfrow=c(2,2))
plot(facthealth$scores[,1:2], type="n", xlab=expression(f[1]),
ylab=expression(f[2]), main="US health (factor scores)")
points(facthealth$scores[,1:2],cex=0.9,col=type,pch=type2)
text(facthealth$scores[,1:2],row.names(ushealth),xpd=NA,cex=0.7,col=type,pos=4)
frame()
plot(facthealth$scores[,c(1,3)], type="n", xlab=expression(f[1]),
ylab=expression(f[3]), main="US health (factor scores)")
points(facthealth$scores[,c(1,3)],cex=0.9,col=type,pch=type2)
text(facthealth$scores[,c(1,3)],row.names(ushealth),xpd=NA ,cex=0.7,col=type,pos=4)
plot(facthealth$scores[,c(2,3)], type="n", xlab=expression(f[2]),
ylab=expression(f[3]), main="US health (factor scores)")
points(facthealth$scores[,c(2,3)],cex=0.9,col=type,pch=type2)
text(facthealth$scores[,c(2,3)],row.names(ushealth),xpd=NA,cex=0.7,col=type,pos=4)
par(opar)
plot(facthealth$scores[,1:2], type="n", xlab=expression(f[1]),
ylab=expression(f[2]), main="US health (factor scores)")
points(facthealth$scores[,1:2],cex=0.9,col=type,pch=type2)
text(facthealth$scores[,1:2],row.names(ushealth),xpd=NA,cex=0.7,col=type,pos=4)
ushealth$reg
type = as.numeric(ushealth$reg)
type2 = type-1
type2[which(type2==3)]=4
dev.new()
par(mfrow=c(2,2))
plot(facthealth$scores[,1:2], type="n", xlab=expression(f[1]),
ylab=expression(f[2]), main="US health (factor scores)")
points(facthealth$scores[,1:2],cex=0.9,col=type,pch=type2)
text(facthealth$scores[,1:2],row.names(ushealth),xpd=NA,cex=0.7,col=type,pos=4)
frame()
plot(facthealth$scores[,c(1,3)], type="n", xlab=expression(f[1]),
ylab=expression(f[3]), main="US health (factor scores)")
points(facthealth$scores[,c(1,3)],cex=0.9,col=type,pch=type2)
text(facthealth$scores[,c(1,3)],row.names(ushealth),xpd=NA ,cex=0.7,col=type,pos=4)
plot(facthealth$scores[,c(2,3)], type="n", xlab=expression(f[2]),
ylab=expression(f[3]), main="US health (factor scores)")
points(facthealth$scores[,c(2,3)],cex=0.9,col=type,pch=type2)
text(facthealth$scores[,c(2,3)],row.names(ushealth),xpd=NA,cex=0.7,col=type,pos=4)
par(opar)
load("/Users/apple/Desktop/semester_2/2.Multi_Stat_Infe/data/uscrime.rda")
head(uscrime)
factcrime <- factanal(~murder+rape+robbery+assault+burglary+larceny+autotheft,
factors=3,rotation="varimax",scores="regression",data=uscrime)
print(factcrime)
facttable <- cbind(factcrime$loadings, (1-factcrime$uniquenesses), factcrime$uniqueness)
colnames(facttable) = c("q1", "q2", "q3", "Communalities", "Specific variances")
print(round(facttable,4))
lab=colnames(uscrime)[3:9]
opar=par(mfrow=c(2,2))
plot(c(-1.1,1.1),c(-1.1,1.1),type="n",main="US crime (varimax)",xlab=expression(q[1]),ylab=expression(q[2]))
ucircle<-cbind(cos((0:360)/180*3.14159),sin((0:360)/180*3.14159))
points(ucircle,type="l",lty="dotted")
abline(h = 0)
abline(v = 0)
text(factcrime$loadings[,1:2],labels=lab,col="black")
frame()
plot(c(-1.1,1.1),c(-1.1,1.1),type="n",main="US crime (varimax)",xlab=expression(q[1]),ylab=expression(q[3]))
points(ucircle,type="l",lty="dotted")
abline(h = 0)
abline(v = 0)
text(factcrime$loadings[,c(1,3)],labels=lab,col="black")
plot(c(-1.1,1.1),c(-1.1,1.1),type="n",main="US crime (varimax)",xlab=expression(q[2]),ylab=expression(q[3]))
points(ucircle,type="l",lty="dotted")
abline(h = 0)
abline(v = 0)
text(factcrime$loadings[,c(2,3)],labels=lab,col="black")
type <- as.numeric(uscrime$reg)
type2 <- type-1
type2[which(type2==3)] <- 4
dev.new()
par(mfrow=c(2,2))
plot(factcrime$scores[,1:2], type="n", xlab=expression(f[1]),
ylab=expression(f[2]), main="US crime (factor scores)")
points(factcrime$scores[,1:2],cex=0.9,col=type,pch=type2)
text(factcrime$scores[,1:2],row.names(uscrime),cex=0.7,xpd=NA,col=type,pos=4)
frame()
plot(factcrime$scores[, c(1, 3)], type="n", xlab=expression(f[1]),
ylab=expression(f[3]), main="US crime (factor scores)")
points(factcrime$scores[,c(1,3)],cex=0.9,col=type,pch=type2)
text(factcrime$scores[,c(1,3)],row.names(uscrime),cex=0.7,xpd=NA,col=type,pos=4)
plot(factcrime$scores[,c(2,3)], type="n", xlab=expression(f[2]),
ylab=expression(f[3]), main="US crime (factor scores)")
points(factcrime$scores[,c(2,3)],cex=0.9,col=type,pch=type2)
text(factcrime$scores[,c(2,3)],row.names(uscrime),cex=0.7,xpd=NA,col=type,pos=4)
load("/Users/apple/Desktop/semester_2/2.Multi_Stat_Infe/data/vocabulary.rda")
head(vocabulary)
voc <- vocabulary[, 1:4]
factvocab <- factanal(voc, factors=1, scores="Bartlett")
facttable <- cbind(factvocab$loadings, (1 - factvocab$uniquenesses),factvocab$uniqueness)
colnames(facttable) <- c("q1", "Communalities", "Specific variances")
print(round(facttable,4))
plot(factanal(voc, factors=1,scores="Bartlett")$scores,type="n",xlab="",ylab="Score")
text(factanal(voc, factors=1,scores="Bartlett")$scores,rownames(voc))
dim(vocabulary)
factanal(voc, factors=1, scores="Bartlett")$scores
plot(factanal(voc, factors=1, scores="Bartlett")$scores, type="n",xlab="",ylab="Score")
text(factanal(voc, factors=1, scores="Bartlett")$scores, rownames(voc))
rownames(voc)
plot(factanal(voc, factors=1, scores="Bartlett")$scores, type="n",xlab="",ylab="Score")
text(factanal(voc, factors=1, scores="Bartlett")$scores, rownames(voc))
load("data/case1.rdata")
load("data/case2.rdata")
load("data/case3.rdata")
library(rrr)
t(X_3) %*% X_3
det(t(X_3) %*% X_3)
rank_trace(X_3, Y_3)
det(t(Y_3) %*% Y_3)
cov(X_3)
det(cov(X_3))
head(X_2)
head(X_3)
# case 3, problems occur
rank_trace(X_2, Y_3)
par(mfrow=c(1, 2))
plot(log(lams_1), train_err, type = "l")
y_num <- ncol(Y_1)
# case 1
lams_1 <- seq(0, 1, 0.001)
idx <- rep(F, 10000)
train_idx <- sample(10000, 7000)
idx[train_idx] <- T
test_err <- c()
train_err <- c()
for (i in lams_1)
{
train <- 0
test <- 0
for (j in 1:y_num) {
fit <- glmnet(X_1[idx, ], Y_1[idx, j])
train_pred <- predict(fit, newx = X_1[idx, ], s=i)
test_pred <- predict(fit, newx = X_1[!idx, ], s=i)
train <- train+sum((train_pred-Y_1[idx, j])**2)
test <- test+sum((test_pred-Y_1[!idx, j])**2)
}
test_err <- c(test_err, test/3000)
train_err <- c(train_err, train/7000)
# if (tmp < sse)
# {
#   sse <- tmp
#   lam <- i
# }
}
library(glmnet)
y_num <- ncol(Y_1)
# case 1
lams_1 <- seq(0, 1, 0.001)
idx <- rep(F, 10000)
train_idx <- sample(10000, 7000)
idx[train_idx] <- T
test_err <- c()
train_err <- c()
for (i in lams_1)
{
train <- 0
test <- 0
for (j in 1:y_num) {
fit <- glmnet(X_1[idx, ], Y_1[idx, j])
train_pred <- predict(fit, newx = X_1[idx, ], s=i)
test_pred <- predict(fit, newx = X_1[!idx, ], s=i)
train <- train+sum((train_pred-Y_1[idx, j])**2)
test <- test+sum((test_pred-Y_1[!idx, j])**2)
}
test_err <- c(test_err, test/3000)
train_err <- c(train_err, train/7000)
# if (tmp < sse)
# {
#   sse <- tmp
#   lam <- i
# }
}
par(mfrow=c(1, 2))
plot(log(lams_1), train_err, type = "l")
plot(log(lams_1), test_err, type = "l")
?glmnet
y_num <- ncol(Y_1)
# case 1
lams_1 <- seq(0, 1, 0.001)
idx <- rep(F, 10000)
train_idx <- sample(10000, 7000)
idx[train_idx] <- T
test_err <- c()
train_err <- c()
for (i in lams_1)
{
train <- 0
test <- 0
for (j in 1:y_num) {
fit <- glmnet(X_1[idx, ], Y_1[idx, j], alpha = 0)
train_pred <- predict(fit, newx = X_1[idx, ], s=i)
test_pred <- predict(fit, newx = X_1[!idx, ], s=i)
train <- train+sum((train_pred-Y_1[idx, j])**2)
test <- test+sum((test_pred-Y_1[!idx, j])**2)
}
test_err <- c(test_err, test/3000)
train_err <- c(train_err, train/7000)
# if (tmp < sse)
# {
#   sse <- tmp
#   lam <- i
# }
}
par(mfrow=c(1, 2))
plot(log(lams_1), train_err, type = "l")
plot(log(lams_1), test_err, type = "l")
lams_2 <- seq(0, 1, 0.001)
idx <- rep(F, 10000)
train_idx <- sample(10000, 7000)
idx[train_idx] <- T
test_err <- c()
train_err <- c()
for (i in lams_2)
{
train <- 0
test <- 0
for (j in 1:y_num) {
fit <- glmnet(X_2[idx, ], Y_2[idx, j], alpha = 0)
train_pred <- predict(fit, newx = X_2[idx, ], s=i)
test_pred <- predict(fit, newx = X_2[!idx, ], s=i)
train <- train+sum((train_pred-Y_2[idx, j])**2)
test <- test+sum((test_pred-Y_2[!idx, j])**2)
}
test_err <- c(test_err, test/3000)
train_err <- c(train_err, train/7000)
}
par(mfrow=c(1, 2))
plot(log(lams_1), train_err, type = "l")
plot(log(lams_1), test_err, type = "l")
par(mfrow=c(1, 2))
plot(log(lams_1), train_err, type = "l", ylim = c(500, 510))
plot(log(lams_1), test_err, type = "l", ylim = c(500, 510))
y_num <- ncol(Y_1)
# case 1
lams_1 <- seq(0, 5, 0.001)
idx <- rep(F, 10000)
train_idx <- sample(10000, 7000)
idx[train_idx] <- T
test_err <- c()
train_err <- c()
for (i in lams_1)
{
train <- 0
test <- 0
for (j in 1:y_num) {
fit <- glmnet(X_1[idx, ], Y_1[idx, j], alpha = 0)
train_pred <- predict(fit, newx = X_1[idx, ], s=i)
test_pred <- predict(fit, newx = X_1[!idx, ], s=i)
train <- train+sum((train_pred-Y_1[idx, j])**2)
test <- test+sum((test_pred-Y_1[!idx, j])**2)
}
test_err <- c(test_err, test/3000)
train_err <- c(train_err, train/7000)
# if (tmp < sse)
# {
#   sse <- tmp
#   lam <- i
# }
}
par(mfrow=c(1, 2))
plot(log(lams_1), train_err, type = "l")
plot(log(lams_1), test_err, type = "l")
y_num <- ncol(Y_1)
# case 1
lams_1 <- seq(0, 20, 0.1)
idx <- rep(F, 10000)
train_idx <- sample(10000, 7000)
idx[train_idx] <- T
test_err <- c()
train_err <- c()
for (i in lams_1)
{
train <- 0
test <- 0
for (j in 1:y_num) {
fit <- glmnet(X_1[idx, ], Y_1[idx, j], alpha = 0)
train_pred <- predict(fit, newx = X_1[idx, ], s=i)
test_pred <- predict(fit, newx = X_1[!idx, ], s=i)
train <- train+sum((train_pred-Y_1[idx, j])**2)
test <- test+sum((test_pred-Y_1[!idx, j])**2)
}
test_err <- c(test_err, test/3000)
train_err <- c(train_err, train/7000)
# if (tmp < sse)
# {
#   sse <- tmp
#   lam <- i
# }
}
par(mfrow=c(1, 2))
plot(log(lams_1), train_err, type = "l")
plot(log(lams_1), test_err, type = "l")
y_num <- ncol(Y_1)
# case 1
lams_1 <- seq(0, 40, 0.1)
idx <- rep(F, 10000)
train_idx <- sample(10000, 7000)
idx[train_idx] <- T
test_err <- c()
train_err <- c()
for (i in lams_1)
{
train <- 0
test <- 0
for (j in 1:y_num) {
fit <- glmnet(X_1[idx, ], Y_1[idx, j], alpha = 0)
train_pred <- predict(fit, newx = X_1[idx, ], s=i)
test_pred <- predict(fit, newx = X_1[!idx, ], s=i)
train <- train+sum((train_pred-Y_1[idx, j])**2)
test <- test+sum((test_pred-Y_1[!idx, j])**2)
}
test_err <- c(test_err, test/3000)
train_err <- c(train_err, train/7000)
# if (tmp < sse)
# {
#   sse <- tmp
#   lam <- i
# }
}
par(mfrow=c(1, 2))
plot(log(lams_1), train_err, type = "l")
plot(log(lams_1), test_err, type = "l")
y_num <- ncol(Y_1)
# case 1
lams_1 <- seq(20, 100, 0.1)
idx <- rep(F, 10000)
train_idx <- sample(10000, 7000)
idx[train_idx] <- T
test_err <- c()
train_err <- c()
for (i in lams_1)
{
train <- 0
test <- 0
for (j in 1:y_num) {
fit <- glmnet(X_1[idx, ], Y_1[idx, j], alpha = 0)
train_pred <- predict(fit, newx = X_1[idx, ], s=i)
test_pred <- predict(fit, newx = X_1[!idx, ], s=i)
train <- train+sum((train_pred-Y_1[idx, j])**2)
test <- test+sum((test_pred-Y_1[!idx, j])**2)
}
test_err <- c(test_err, test/3000)
train_err <- c(train_err, train/7000)
# if (tmp < sse)
# {
#   sse <- tmp
#   lam <- i
# }
}
par(mfrow=c(1, 2))
plot(log(lams_1), train_err, type = "l")
plot(log(lams_1), test_err, type = "l")
y_num <- ncol(Y_1)
# case 1
lams_1 <- seq(20, 100, 0.1)
idx <- rep(F, 10000)
train_idx <- sample(10000, 7000)
idx[train_idx] <- T
test_err <- c()
train_err <- c()
for (i in lams_1)
{
train <- 0
test <- 0
for (j in 1:y_num) {
fit <- glmnet(X_1[idx, ], Y_1[idx, j])
train_pred <- predict(fit, newx = X_1[idx, ], s=i)
test_pred <- predict(fit, newx = X_1[!idx, ], s=i)
train <- train+sum((train_pred-Y_1[idx, j])**2)
test <- test+sum((test_pred-Y_1[!idx, j])**2)
}
test_err <- c(test_err, test/3000)
train_err <- c(train_err, train/7000)
# if (tmp < sse)
# {
#   sse <- tmp
#   lam <- i
# }
}
par(mfrow=c(1, 2))
plot(log(lams_1), train_err, type = "l")
plot(log(lams_1), test_err, type = "l")
plot(log(lams_1), train_err, type = "l", ylim = c(490, 500))
plot(log(lams_1), train_err, type = "l", ylim = c(490, 510))
plot(log(lams_1), train_err, type = "l", ylim = c(500, 505))
plot(log(lams_1), train_err, type = "l", ylim = c(503, 504))
y_num <- ncol(Y_1)
# case 1
lams_1 <- seq(0, 5, 0.1)
idx <- rep(F, 10000)
train_idx <- sample(10000, 7000)
idx[train_idx] <- T
test_err <- c()
train_err <- c()
for (i in lams_1)
{
train <- 0
test <- 0
for (j in 1:y_num) {
fit <- glmnet(X_1[idx, ], Y_1[idx, j])
train_pred <- predict(fit, newx = X_1[idx, ], s=i)
test_pred <- predict(fit, newx = X_1[!idx, ], s=i)
train <- train+sum((train_pred-Y_1[idx, j])**2)
test <- test+sum((test_pred-Y_1[!idx, j])**2)
}
test_err <- c(test_err, test/3000)
train_err <- c(train_err, train/7000)
# if (tmp < sse)
# {
#   sse <- tmp
#   lam <- i
# }
}
par(mfrow=c(1, 2))
plot(log(lams_1), train_err, type = "l", ylim = c(503, 504))
plot(log(lams_1), test_err, type = "l")
1/e
1/exp(1)
log(0.36)
# case 2
rank_trace(X_2, Y_2)
setwd("~/Desktop/semester_2/4.Stat_ML/hw/hw6")
H <- matrix(readBin("histograms.bin", "double", 640000), 40000, 16)
dim(H)
rowSums(H)[1:10]
rowSums(H)
head(H)
dim(H)
MultinomialEM = function(H, K, tau){
# @param H - the data matrix
# @param K - the number of clusters
# @param tau - threshold parameter
# @return m - cluster label
# Initilize
H = H + .01
set.seed(1)
center_label = sample(1:nrow(H), K, replace = FALSE)
t = H[center_label, ]
# t = t / rowSums(t)
# Iteration
phi   = matrix(0, nrow = nrow(H), ncol = K)
a     = matrix(0, nrow = nrow(H), ncol = K)
c     = rep(1 / K, K)
delta = Inf
while (delta > tau){
# E - step
phi   = exp(H %*% t(log(t)))
a_old = a
a     = phi * t(replicate(nrow(H), c)) / replicate(K, as.vector(phi %*% c))
# M - step
c     = colSums(a) / nrow(H)
b     = t(a) %*% H
t     = b / rowSums(b)
delta = norm(a - a_old, type = "O")
}
m = apply(a, MARGIN = 1, which.max)
return(m)
}
# Run with different tau and K
tau = c(.001, .005, .01)
m1 = sapply(tau, MultinomialEM, H = H, K = 3)
dim(m1)
head
head(m1)
MultinomialEM(H, 3, 0.001)
image(fig1, col = grey(seq(0, 1, length = 256)), main = "K = 3")
# Convert into figures
fig1 = matrix(m1[,1], nrow = 200, ncol = 200, byrow = TRUE)
fig1
write.table(H, file="histograms.txt", row.names=FALSE, col.names=FALSE)
image(fig1, col = grey(seq(0, 1, length = 256)), main = "K = 3")
fig1 = matrix(MultinomialEM(H, 3, 0.001), nrow = 200, ncol = 200, byrow = TRUE)
image(fig1, col = grey(seq(0, 1, length = 256)), main = "K = 3")
# Convert into figures
fig1 = matrix(m1[,2], nrow = 200, ncol = 200, byrow = TRUE)
image(fig1, col = grey(seq(0, 1, length = 256)), main = "K = 3")
sum(m1[, 1] == m1[, 2])
sum(m1[, 1] == m1[, 3])
length(MultinomialEM(H, 3, 0.001))
m1
fig1
write.table(fig1, file="fig1", row.names=FALSE, col.names=FALSE)
write.table(fig1, file="fig1.txt", row.names=FALSE, col.names=FALSE)
